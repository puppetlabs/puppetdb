#! /bin/sh
### BEGIN INIT INFO
# Provides:          grayskull
# Required-Start:    $network $named $remote_fs $syslog
# Required-Stop:     $network $named $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
### END INIT INFO


DIR="<%= scope.lookupvar('grayskull::installdir') %>"
DAEMON="$DIR/daemonize.rb"
JARFILE="$DIR/grayskull.jar"
DAEMON_OPTS="/usr/bin/java -jar $JARFILE services -c $DIR/config.ini"
NAME=grayskull
DESC="Grayskull"
PIDFILE="<%= scope.lookupvar('grayskull::installdir') %>/${NAME}.pid"

test -x $DAEMON || exit 0

. /lib/lsb/init-functions

is_true() {
    if [ "x$1" = "xtrue" -o "x$1" = "xyes" -o "x$1" = "x0" ] ; then
        return 0
    else
        return 1
    fi
}

reload() {
    start-stop-daemon --stop --quiet --signal HUP --pidfile $PIDFILE
}

start() {
    start-stop-daemon --start --quiet --pidfile $PIDFILE \
        --startas $DAEMON -- $DAEMON_OPTS 1> $DIR/stdout.log 2> $DIR/stderr.log &
}

stop() {
    # wait until really stopped
    PID=`cat $PIDFILE 2> /dev/null`

    start-stop-daemon --stop --quiet --oknodo --retry=TERM/30/STOP/30/KILL/30 --pidfile $PIDFILE

    if [ -n "${PID:-}" ]; then
        i=0
        while kill -0 "${PID:-}" 2> /dev/null;  do
            if [ $i = '60' ]; then
                kill -9 $PID
                rm -f $PIDFILE
                break;
            else
                if [ $i = '0' ]; then
                    echo -n " ... waiting "
                else
                    echo -n "."
                fi
                i=$(($i+1))
                sleep 1
            fi
        done
    fi
}

status() {
    if [ -f "${PIDFILE}" ]; then
        status_of_proc -p "${PIDFILE}" "${DAEMON}" "${NAME}"
    else
        if $(ps -ef | grep "$JARFILE" | grep -v grep 2>&1 > /dev/null); then
            log_daemon_msg "${NAME} is running"
            return 0
        fi; 
        log_daemon_msg "${NAME} is not running"
        return 1
    fi
}

case "$1" in
    start)
    log_begin_msg "Starting $DESC"
    start
    log_end_msg $?
    ;;
    stop)
    log_begin_msg "Stopping $DESC"
    stop
    log_end_msg $?
    ;;
    status)
        status
    ;;
    restart|force-reload)
    log_begin_msg "Restarting $DESC"
    stop
    sleep 1
    start
    log_end_msg $?
    ;;
  *)
    echo "Usage: $0 {start|stop|status|restart|force-reload|reload}" >&2
    exit 1
    ;;
esac
