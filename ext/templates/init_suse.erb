#!/bin/sh
#
#     Template SUSE system startup script for <%= @name -%>
#     Copyright (C) 1995--2005  Kurt Garloff, SUSE / Novell Inc.
#          
#     This library is free software; you can redistribute it and/or modify it
#     under the terms of the GNU Lesser General Public License as published by
#     the Free Software Foundation; either version 2.1 of the License, or (at
#     your option) any later version.
#			      
#     This library is distributed in the hope that it will be useful, but
#     WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#     Lesser General Public License for more details.
#      
#     You should have received a copy of the GNU Lesser General Public
#     License along with this library; if not, write to the Free Software
#     Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
#     USA.
#
# /etc/init.d/puppetdb
#   and its symbolic link
# /(usr/)sbin/rcpuppetdb
#
# Template system startup script for some example service/daemon puppetdb
#
# LSB compatible service control script; see http://www.linuxbase.org/spec/
# 
# Note: This template uses functions rc_XXX defined in /etc/rc.status on
# UnitedLinux/SUSE/Novell based Linux distributions. If you want to base your
# script on this template and ensure that it works on non UL based LSB 
# compliant Linux distributions, you either have to provide the rc.status
# functions from UL or change the script to work without them.
# See skeleton.compat for a template that works with other distros as well.
#
### BEGIN INIT INFO
# Provides:          <%= @name %>
# Required-Start:    $syslog $remote_fs
# Should-Start:      $time ypbind smtp
# Required-Stop:     $syslog $remote_fs
# Should-Stop:       ypbind smtp
# Default-Start:     3 5
# Default-Stop:      0 1 2 6
# Short-Description: <%= @name -%> stored config server
# Description:       Start <%= @name -%> daemon placed in /etc/init.d.
### END INIT INFO

# Check for missing binaries (stale symlinks should not happen)
# Note: Special treatment of stop for LSB conformance
#puppetdb_BIN=/usr/sbin/<%= @name -%>

# Check for existence of needed config file and read it
puppetdb_CONFIG=/etc/sysconfig/puppetdb
test -r $puppetdb_CONFIG || { echo "$puppetdb_CONFIG not existing";
	if [ "$1" = "stop" ]; then exit 0;
	else exit 6; fi; }

# Read config	
. $puppetdb_CONFIG

prog="puppetdb"

<% if @pe -%>
PATH=/opt/puppet/bin:/opt/puppet/sbin:/sbin:/usr/sbin:/bin:/usr/bin
<% else -%>
PATH=/sbin:/usr/sbin:/bin:/usr/bin
<% end -%>
JARFILE="puppetdb.jar"
JAVA_ARGS="${JAVA_ARGS} -jar ${INSTALL_DIR}/${JARFILE} services -c ${CONFIG} "
EXTRA_ARGS="--chuid $USER --background --make-pidfile"
lockfile=/var/run/rc${prog}
EXEC="$JAVA_BIN $JAVA_ARGS" # -XX:OnOutOfMemoryError='kill -9 %p' $JAVA_ARGS"
PIDFILE="/var/run/puppetdb/puppetdb.pid"

# Source LSB init functions
# providing start_daemon, killproc, pidofproc, 
# log_success_msg, log_failure_msg and log_warning_msg.
# This is currently not used by UnitedLinux based distributions and
# not needed for init scripts for UnitedLinux only. If it is used,
# the functions from rc.status should not be sourced or used.
#. /lib/lsb/init-functions
    
# Shell functions sourced from /etc/rc.status:
#      rc_check         check and set local and overall rc status
#      rc_status        check and set local and overall rc status
#      rc_status -v     be verbose in local rc status and clear it afterwards
#      rc_status -v -r  ditto and clear both the local and overall rc status
#      rc_status -s     display "skipped" and exit with status 3
#      rc_status -u     display "unused" and exit with status 3
#      rc_failed        set local and overall rc status to failed
#      rc_failed <num>  set local and overall rc status to <num>
#      rc_reset         clear both the local and overall rc status
#      rc_exit          exit appropriate to overall rc status
#      rc_active        checks whether a service is activated by symlinks
. /etc/rc.status

# Reset status of this service
rc_reset

# Return values acc. to LSB for all commands but status:
# 0	  - success
# 1       - generic or unspecified error
# 2       - invalid or excess argument(s)
# 3       - unimplemented feature (e.g. "reload")
# 4       - user had insufficient privileges
# 5       - program is not installed
# 6       - program is not configured
# 7       - program is not running
# 8--199  - reserved (8--99 LSB, 100--149 distrib, 150--199 appl)
# 
# Note that starting an already running service, stopping
# or restarting a not-running service as well as the restart
# with force-reload (in case signaling is not supported) are
# considered a success.
test -x $JAVA_BIN || { echo "java not installed"; 
    if [ "$1" = "stop" ]; then exit 0;
    else exit 5; fi; }
test -e $INSTALL_DIR/$JARFILE || { echo "not installed"; 
    if [ "$1" = "stop" ]; then exit 0;
    else exit 5; fi; }

check_pid() {
    if [ ! -d  "/var/run/$prog" ] ; then
      mkdir -p /var/run/$prog
      chown -R $USER:$USER /var/run/$prog
    fi
    pid=`ps -efww | grep $JAVA_BIN | grep $JARFILE | grep " services -c " | awk '{print $2}'`
}


case "$1" in
    start)
    if [ -e "/var/log/puppetdb/puppetdb-oom.hprof" ] ; then
      mv "/var/log/puppetdb/puppetdb-oom.hprof" "/var/log/puppetdb/puppetdb-oom.hprof.prev"
    fi    
    echo -n "Starting puppetdb "
    ## Start daemon with startproc(8). If this fails
    ## the return value is set appropriately by startproc.
    check_pid
    /sbin/startproc -v -u $USER -p $PIDFILE -l /var/log/puppetdb/puppetdb-daemon.log $EXEC
    check_pid
    if [ "x$pid" != "x" ]; then
      echo $pid > $PIDFILE
      chown $USER $PIDFILE
    fi
    # Remember status and be verbose
    rc_status -v
    ;;
    stop)
    echo -n "Shutting down puppetdb "
    ## Stop daemon with killproc(8) and if this fails
    ## killproc sets the return value according to LSB.

    /sbin/killproc -TERM -p $PIDFILE $JAVA_BIN

    # Remember status and be verbose
    rc_status -v
    ;;
    try-restart|condrestart)
    ## Do a restart only if the service was active before.
    ## Note: try-restart is now part of LSB (as of 1.9).
    ## RH has a similar command named condrestart.
    if test "$1" = "condrestart"; then
        echo "${attn} Use try-restart ${done}(LSB)${attn} rather than condrestart ${warn}(RH)${norm}"
    fi
    $0 status
    if test $? = 0; then
        $0 restart
    else
        rc_reset	# Not running is not a failure.
    fi
    # Remember status and be quiet
    rc_status
    ;;
    restart)
    ## Stop the service and regardless of whether it was
    ## running or not, start it again.
    $0 stop
    $0 start

    # Remember status and be quiet
    rc_status
    ;;
    force-reload)
    ## Signal the daemon to reload its config. Most daemons
    ## do this on signal 1 (SIGHUP).
    ## If it does not support it, restart the service if it
    ## is running.

    echo -n "Reload service puppetdb "
    ## if it supports it:
    /sbin/killproc -HUP -p $PIDFILE $JAVA_BIN
    #touch /var/run/puppetdb.pid
    rc_status -v

    ## Otherwise:
    #$0 try-restart
    #rc_status
    ;;
    reload)
    ## Like force-reload, but if daemon does not support
    ## signaling, do nothing (!)

    # If it supports signaling:
    echo -n "Reload service puppetdb "
    /sbin/killproc -HUP -p $PIDFILE $JAVA_BIN
    #touch /var/run/puppetdb.pid
    rc_status -v
    
    ## Otherwise if it does not support reload:
    #rc_failed 3
    #rc_status -v
    ;;
    status)
    echo -n "Checking for service puppetdb "
    ## Check status with checkproc(8), if process is running
    ## checkproc will return with exit status 0.

    # Return value is slightly different for the status command:
    # 0 - service up and running
    # 1 - service dead, but /var/run/  pid  file exists
    # 2 - service dead, but /var/lock/ lock file exists
    # 3 - service not running (unused)
    # 4 - service status unknown :-(
    # 5--199 reserved (5--99 LSB, 100--149 distro, 150--199 appl.)
    
    # NOTE: checkproc returns LSB compliant status values.
    /sbin/checkproc -p $PIDFILE $JAVA_BIN
    # NOTE: rc_status knows that we called this init script with
    # "status" option and adapts its messages accordingly.
    rc_status -v
    ;;
    probe)
    ## Optional: Probe for the necessity of a reload, print out the
    ## argument to this init script which is required for a reload.
    ## Note: probe is not (yet) part of LSB (as of 1.9)

    test /etc/puppetdb/puppetdb.conf -nt /var/run/puppetdb.pid && echo reload
    ;;
    *)
    echo "Usage: $0 {start|stop|status|try-restart|restart|force-reload|reload|probe}"
    exit 1
    ;;
esac
rc_exit
